dis <- main(infile$datapath, infile$name)
#generate appropriate output files
#Robot Commands---------------
sel_colnames <- colnames(cmdList_output[[4]])
#initiate new command line output
new_cmdLineOutput <- c()
#add first item
nex_item <- replicate(length(sel_colnames), "")
nex_item[1] <- cmdList_output[[1]]
nex_item <- data.frame(t(nex_item))
colnames(nex_item) <- sel_colnames
new_cmdLineOutput <- rbind(new_cmdLineOutput, nex_item)
new_cmdLineOutput[] <- lapply(new_cmdLineOutput, as.character)
#add second item
cur_item <- cmdList_output[[2]]
cur_item[] <- lapply(cur_item, as.character)
new_item <- c()
for(j in c(1:length(cur_item[,1]))){
cur_itemRow <- cur_item[j,]
nex_item <- replicate(length(sel_colnames), "")
nex_item[1:length(cur_itemRow)] <- cur_itemRow
new_item <- rbind(new_item, nex_item)
}
colnames(new_item) <- c(sel_colnames)
new_item[] <- lapply(new_item, as.character)
new_cmdLineOutput <- rbind(new_cmdLineOutput, new_item)
#add third item
nex_item <- replicate(length(sel_colnames), "")
nex_item[1] <- cmdList_output[[3]]
nex_item <- data.frame(t(nex_item))
colnames(nex_item) <- sel_colnames
new_cmdLineOutput <- rbind(new_cmdLineOutput, nex_item)
#add fourth item
nex_item <- cmdList_output[[4]]
nex_item[] <- lapply(nex_item, as.character)
new_cmdLineOutput <- rbind.data.frame(new_cmdLineOutput, cmdList_output[[4]])
new_cmdLineOutput <- apply(new_cmdLineOutput,2,as.character)
#add fifth item
nex_item <- replicate(length(sel_colnames), "")
nex_item[1] <- cmdList_output[[5]]
nex_item <- data.frame(t(nex_item))
colnames(nex_item) <- sel_colnames
new_cmdLineOutput <- rbind(new_cmdLineOutput, nex_item)
#add sixth item
first_item <- c()
curItem <- usercmd_output[[1]]
for(i in c(1:8)){
curRow <- curItem[i,]
nex_item <- replicate(length(sel_colnames), "")
nex_item[1:length(curRow)] <- curRow
first_item <- rbind(first_item, nex_item)
}
colnames(first_item) <- sel_colnames
new_cmdLineOutput <- rbind.data.frame(new_cmdLineOutput, first_item)
#place to global
new_cmdLineOutput <<- new_cmdLineOutput
#User Commands---------------
sel_colnames <- colnames(usercmd_output[[2]])
#initiate new command line output
new_userGuideOutput <- c()
#add first item
nex_item <- replicate(length(sel_colnames), "")
nex_item[1] <- '>>> OT2 DECK MAP <<<'
nex_item <- data.frame(t(nex_item))
colnames(nex_item) <- sel_colnames
new_userGuideOutput <- rbind(new_userGuideOutput, nex_item)
#add second item
first_item <- c()
curItem <- usercmd_output[[1]]
for(i in c(1:8)){
curRow <- curItem[i,]
nex_item <- replicate(length(sel_colnames), "")
nex_item[1:length(curRow)] <- curRow
first_item <- rbind(first_item, nex_item)
}
colnames(first_item) <- sel_colnames
new_userGuideOutput <- rbind.data.frame(new_userGuideOutput, first_item)
#add fourth item
new_userGuideOutput <- rbind.data.frame(usercmd_output[[2]], new_userGuideOutput)
new_userGuideOutput <- apply(new_userGuideOutput,2,as.character)
new_userGuideOutput <<- new_userGuideOutput
#savekeeping output files
#command line
cmdLine_name <- paste("CommandList_", new_name(), '.csv', sep='')
write_dir <- paste(outputDir_cmdline, cmdLine_name, sep='/')
write.csv(new_cmdLineOutput, write_dir, row.names = FALSE)
#user guide
usrGuide_name <- paste("RobotHandler_", new_name(), '.xlsx', sep='')
write_dir <- paste(outputDir_usrGuide, usrGuide_name, sep='/')
write.xlsx(new_userGuideOutput, write_dir, row.names = FALSE, col.names=T)
}
return(dis)
})
output$tab <- renderTable({contents()})
#Enabling download button-------
output$downloadData <- renderUI({
req(input$do, contents())
downloadButton("d_OT2", "Download Robot Commands")
})
output$downloadData2 <- renderUI({
req(input$do, contents())
downloadButton("guide", "Download Robot Setup Guide")
})
#Sample File Name--------
output$tex <- renderText({new_name()})
#Defining download buttons--------
output$d_OT2 <- downloadHandler(
filename = function(){paste("CommandList_", new_name(), '.csv', sep='')},
content = function(file) {
write.csv(new_cmdLineOutput, file, row.names = FALSE)
}
)
output$guide <- downloadHandler(
filename = function(){paste("RobotHandler_", new_name(), '.xlsx', sep='')},
content = function(file) {
write.xlsx(new_userGuideOutput, file, row.names = FALSE, col.names=T)
}
)
#download input template
output$downloadTemplate <- downloadHandler(
filename = "MIC_InputTemplate.xlsx",
content = function(file) {
file.copy(inputTemplate, file)
}
)
})
outputDir_usrGuide <- "C:\\Users\\Sebastian\\Desktop\\MSc Leiden 2nd Year\\##LabAst Works\\FinVersion\\OT2_UpstreamExcelProc_MAIN\\Checkpoint - Postpatch\\20201016_AddingPlateMap to Output\\MultiplateMIC_Uploader_v2"
inputTemplate <- "C:\\Users\\Sebastian\\Desktop\\MSc Leiden 2nd Year\\##LabAst Works\\FinVersion\\OT2_UpstreamExcelProc_MAIN\\Checkpoint - Postpatch\\20201016_AddingPlateMap to Output\\MultiplateMIC_Uploader_v2\\MultiplateMIC_InputTemplate.xlsx"
#SERVER MAIN------------
shinyServer(function(input, output) {
#defining directory-------
outputDir_cmdline <- "C:\\Users\\Sebastian\\Desktop\\MSc Leiden 2nd Year\\##LabAst Works\\FinVersion\\OT2_UpstreamExcelProc_MAIN\\Checkpoint - Postpatch\\20201016_AddingPlateMap to Output\\MultiplateMIC_Uploader_v2"
outputDir_usrGuide <- "C:\\Users\\Sebastian\\Desktop\\MSc Leiden 2nd Year\\##LabAst Works\\FinVersion\\OT2_UpstreamExcelProc_MAIN\\Checkpoint - Postpatch\\20201016_AddingPlateMap to Output\\MultiplateMIC_Uploader_v2"
inputTemplate <- "C:\\Users\\Sebastian\\Desktop\\MSc Leiden 2nd Year\\##LabAst Works\\FinVersion\\OT2_UpstreamExcelProc_MAIN\\Checkpoint - Postpatch\\20201016_AddingPlateMap to Output\\MultiplateMIC_Uploader_v2\\MultiplateMIC_InputTemplate.xlsx"
#outputDir_cmdline <- "/srv/shiny-server/files/Output_CmdList"
#outputDir_usrGuide <- "/srv/shiny-server/files/Output_UsrGuide"
#inputTemplate <- "/srv/shiny-server/MultiplateMIC_Uploader_v1/MultiplateMIC_InputTemplate.xlsx"
#Obtain names---------
new_name <- reactive({
if(is.null(input$pmid)){pmid <- ''}else{pmid <- input$pmid}
if(is.null(input$exp_name)){expName <- ''}else{expName <- input$exp_name}
if(is.null(input$exp_num)){expNum <- ''}else{expNum <- input$exp_num}
if(is.null(input$f_name)){fName <- ''}else{fName <- input$f_name}
if(is.null(input$l_name)){lName <- ''}else{lName <- input$l_name}
#paste
res <- paste("PMID-", pmid, "_EXPID-",
expName, "-", expNum, "_", lName, ".", fName, sep='')
return(res)
})
#Confirming Upload File-----------
contents <- reactive({
infile = input$file
if(is.null(infile)){return(NULL)}
if(input$do==0){
dis <- read.xlsx(infile$datapath, 1, rowIndex = c(56:63), colIndex=c(2:13), header=F)
}else{
#rename files for safekeeping
file_name <<- strsplit(infile$name, '.xl')[[1]][1]
#file.copy(infile$datapath, homeDir)
#file.rename(paste(homeDir, "0.xlsx", sep='\\'), paste("UserInput_", file_name, ".xlsx", sep=""))
#update table view
dis <- main(infile$datapath, infile$name)
#generate appropriate output files
#Robot Commands---------------
sel_colnames <- colnames(cmdList_output[[4]])
#initiate new command line output
new_cmdLineOutput <- c()
#add first item
nex_item <- replicate(length(sel_colnames), "")
nex_item[1] <- cmdList_output[[1]]
nex_item <- data.frame(t(nex_item))
colnames(nex_item) <- sel_colnames
new_cmdLineOutput <- rbind(new_cmdLineOutput, nex_item)
new_cmdLineOutput[] <- lapply(new_cmdLineOutput, as.character)
#add second item
cur_item <- cmdList_output[[2]]
cur_item[] <- lapply(cur_item, as.character)
new_item <- c()
for(j in c(1:length(cur_item[,1]))){
cur_itemRow <- cur_item[j,]
nex_item <- replicate(length(sel_colnames), "")
nex_item[1:length(cur_itemRow)] <- cur_itemRow
new_item <- rbind(new_item, nex_item)
}
colnames(new_item) <- c(sel_colnames)
new_item[] <- lapply(new_item, as.character)
new_cmdLineOutput <- rbind(new_cmdLineOutput, new_item)
#add third item
nex_item <- replicate(length(sel_colnames), "")
nex_item[1] <- cmdList_output[[3]]
nex_item <- data.frame(t(nex_item))
colnames(nex_item) <- sel_colnames
new_cmdLineOutput <- rbind(new_cmdLineOutput, nex_item)
#add fourth item
nex_item <- cmdList_output[[4]]
nex_item[] <- lapply(nex_item, as.character)
new_cmdLineOutput <- rbind.data.frame(new_cmdLineOutput, cmdList_output[[4]])
new_cmdLineOutput <- apply(new_cmdLineOutput,2,as.character)
#add fifth item
nex_item <- replicate(length(sel_colnames), "")
nex_item[1] <- cmdList_output[[5]]
nex_item <- data.frame(t(nex_item))
colnames(nex_item) <- sel_colnames
new_cmdLineOutput <- rbind(new_cmdLineOutput, nex_item)
#add sixth item
first_item <- c()
curItem <- usercmd_output[[1]]
for(i in c(1:8)){
curRow <- curItem[i,]
nex_item <- replicate(length(sel_colnames), "")
nex_item[1:length(curRow)] <- curRow
first_item <- rbind(first_item, nex_item)
}
colnames(first_item) <- sel_colnames
new_cmdLineOutput <- rbind.data.frame(new_cmdLineOutput, first_item)
#place to global
new_cmdLineOutput <<- new_cmdLineOutput
#User Commands---------------
sel_colnames <- colnames(usercmd_output[[2]])
#initiate new command line output
new_userGuideOutput <- c()
#add first item
nex_item <- replicate(length(sel_colnames), "")
nex_item[1] <- '>>> OT2 DECK MAP <<<'
nex_item <- data.frame(t(nex_item))
colnames(nex_item) <- sel_colnames
new_userGuideOutput <- rbind(new_userGuideOutput, nex_item)
#add second item
first_item <- c()
curItem <- usercmd_output[[1]]
for(i in c(1:8)){
curRow <- curItem[i,]
nex_item <- replicate(length(sel_colnames), "")
nex_item[1:length(curRow)] <- curRow
first_item <- rbind(first_item, nex_item)
}
colnames(first_item) <- sel_colnames
new_userGuideOutput <- rbind.data.frame(new_userGuideOutput, first_item)
#add fourth item
new_userGuideOutput <- rbind.data.frame(usercmd_output[[2]], new_userGuideOutput)
new_userGuideOutput <- apply(new_userGuideOutput,2,as.character)
new_userGuideOutput <<- new_userGuideOutput
#savekeeping output files
#command line
cmdLine_name <- paste("CommandList_", new_name(), '.csv', sep='')
write_dir <- paste(outputDir_cmdline, cmdLine_name, sep='/')
write.csv(new_cmdLineOutput, write_dir, row.names = FALSE)
#user guide
usrGuide_name <- paste("RobotHandler_", new_name(), '.xlsx', sep='')
write_dir <- paste(outputDir_usrGuide, usrGuide_name, sep='/')
write.xlsx(new_userGuideOutput, write_dir, row.names = FALSE, col.names=T)
}
return(dis)
})
output$tab <- renderTable({contents()})
#Enabling download button-------
output$downloadData <- renderUI({
req(input$do, contents())
downloadButton("d_OT2", "Download Robot Commands")
})
output$downloadData2 <- renderUI({
req(input$do, contents())
downloadButton("guide", "Download Robot Setup Guide")
})
#Sample File Name--------
output$tex <- renderText({new_name()})
#Defining download buttons--------
output$d_OT2 <- downloadHandler(
filename = function(){paste("CommandList_", new_name(), '.csv', sep='')},
content = function(file) {
write.csv(new_cmdLineOutput, file, row.names = FALSE)
}
)
output$guide <- downloadHandler(
filename = function(){paste("RobotHandler_", new_name(), '.xlsx', sep='')},
content = function(file) {
write.xlsx(new_userGuideOutput, file, row.names = FALSE, col.names=T)
}
)
#download input template
output$downloadTemplate <- downloadHandler(
filename = "MIC_InputTemplate.xlsx",
content = function(file) {
file.copy(inputTemplate, file)
}
)
})
shinyUI(
pageWithSidebar(
headerPanel("MIC Test - OT2-Commander"),
sidebarPanel(
fileInput("file", "Upload Plate Map", accept=".xlsx"),
downloadButton("downloadTemplate", label = "Template Input"),
textInput("pmid", 'Plate Map ID (PMID)'),
textInput("f_name", 'First Name'),
textInput("l_name", 'Last Name'),
textInput("exp_name", 'Experiment Name'),
textInput("exp_num", 'Experiment Number'),
textOutput('tex'),
actionButton("do", "Confirm uploaded file and save"),
uiOutput('downloadData'),
uiOutput('downloadData2')
),
mainPanel(
tableOutput('tab')
)
))
shiny::runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/FinVersion/OT2_UpstreamExcelProc_MAIN/Checkpoint - Postpatch/20201016_AddingPlateMap to Output/MultiplateMIC_Uploader_v2')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/FinVersion/OT2_UpstreamExcelProc_MAIN/Checkpoint - Postpatch/20201016_AddingPlateMap to Output/MultiplateMIC_Uploader_v2')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/FinVersion/OT2_UpstreamExcelProc_MAIN/Checkpoint - Postpatch/20201016_AddingPlateMap to Output/MultiplateMIC_Uploader_v2')
solvent_map
#calculate required amount
solvent_amt <- sum(as.numeric(relCmdList$TransAmt) * n_well * n_plate)
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/FinVersion/OT2_UpstreamExcelProc_MAIN/Checkpoint - Postpatch/20201016_AddingPlateMap to Output/MultiplateMIC_Uploader_v2')
insol_map
solvent_map
last_slot <- solvent_map$Slot[length(solvent_map[,1])]
last_slot
strsplit(last_slot, split='', fixed=T)
strsplit(last_slot, split='', fixed=T)[[1]]
last_slot <- strsplit(last_slot, split='', fixed=T)[[1]]
last_slot
LETTERS
which(LETTERS==last_slot[1])
last_slot <- strsplit(last_slot, split='', fixed=T)[[1]] #get last filled slot
last_slot[1] <- which(LETTERS==last_slot[1]) #translate location to numbers
last_slot
last_slot <- strsplit(last_slot, split='', fixed=T)[[1]]
last_slot
last_slot <- strsplit(solvent_map$Slot[length(solvent_map[,1])], split='', fixed=T)[[1]] #get last filled slot
last_slot
last_slot <- strsplit(solvent_map$Slot[length(solvent_map[,1])],
split='', fixed=T)[[1]] #get last filled slot
last_slot[1] <- which(LETTERS==last_slot[1]) #translate location to numbers
last_slot
last_slot <- as.numeric(last_slot)
last_slot
solvent_map
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/FinVersion/OT2_UpstreamExcelProc_MAIN/Checkpoint - Postpatch/20201016_AddingPlateMap to Output/MultiplateMIC_Uploader_v2')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/FinVersion/OT2_UpstreamExcelProc_MAIN/Checkpoint - Postpatch/20201016_AddingPlateMap to Output/MultiplateMIC_Uploader_v2')
45+17
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/FinVersion/OT2_UpstreamExcelProc_MAIN/Checkpoint - Postpatch/20201016_AddingPlateMap to Output/MultiplateMIC_Uploader_v2')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/FinVersion/OT2_UpstreamExcelProc_MAIN/Checkpoint - Postpatch/20201016_AddingPlateMap to Output/MultiplateMIC_Uploader_v2')
cmdList
head(cmdList)
View(cmdList)
deckMap
deck_map
View(usercmd_output)
usrcmd_output[[2]]
usrcmd_output
usercmd_output[[1]]
head(solvent_map)
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/FinVersion/OT2_UpstreamExcelProc_MAIN/Checkpoint - Postpatch/20201016_AddingPlateMap to Output/MultiplateMIC_Uploader_v2')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/FinVersion/OT2_UpstreamExcelProc_MAIN/Checkpoint - Postpatch/20201016_AddingPlateMap to Output/MultiplateMIC_Uploader_v2')
cmdList
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/FinVersion/OT2_UpstreamExcelProc_MAIN/Checkpoint - Postpatch/20201016_AddingPlateMap to Output/MultiplateMIC_Uploader_v2')
View(sol_amt)
View(solList)
View(solvent_map)
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/FinVersion/OT2_UpstreamExcelProc_MAIN/Checkpoint - Postpatch/20201016_AddingPlateMap to Output/MultiplateMIC_Uploader_v2')
shiny::runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
View(cmdList)
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
View(curList)
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
dis
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
dis
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
dilMap
View(dilMap)
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
solList
View(solList)
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
dis
View(dis)
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
dis
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
?order
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
des
order(c(1,3,5,2,0))
des <- c(1,3,5,2,0)
das <- des[order(des)]
das
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
runApp('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC')
setwd(sourceDir)
outputDir_cmdline <- "C:\\Users\\Sebastian\\Desktop\\MSc Leiden 2nd Year\\##LabAst Works\\#OT2_Main\\SingleplateMIC"
outputDir_usrGuide <- "C:\\Users\\Sebastian\\Desktop\\MSc Leiden 2nd Year\\##LabAst Works\\#OT2_Main\\SingleplateMIC"
inputTemplate <- "C:\\Users\\Sebastian\\Desktop\\MSc Leiden 2nd Year\\##LabAst Works\\#OT2_Main\\SingleplateMIC\\MIC_InputTemplate.xlsx"
sourceDir <- "C:\\Users\\Sebastian\\Desktop\\MSc Leiden 2nd Year\\##LabAst Works\\#OT2_Main\\SingleplateMIC"
setwd(sourceDir)
source(sourceFunctions.R)
source("sourceFunctions.R")
shiny::runApp()
runApp()
?norm
?qnorm
qnorm(0.95)
pnorm(1.96)
qnorm(0.995)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?tryCatch
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
das
source('~/.active-rstudio-document', echo=TRUE)
asd
das
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
errFun(asd)
source('~/.active-rstudio-document', echo=TRUE)
das
runApp()
errMessage
errMessage
runApp()
errMessage
runApp()
errMessage
source('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC/sourceFunctions.R', echo=TRUE)
runApp()
stockList
source('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC/sourceFunctions.R', echo=TRUE)
runApp()
errMessage
source('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC/sourceFunctions.R', echo=TRUE)
runApp()
runApp()
errMessage
source('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC/sourceFunctions.R', echo=TRUE)
runApp()
runApp()
runApp()
errMessage
source('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC/sourceFunctions.R', echo=TRUE)
runApp()
errMessage
source('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC/sourceFunctions.R', echo=TRUE)
runApp()
source('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC/sourceFunctions.R', echo=TRUE)
runApp()
source('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC/sourceFunctions.R', echo=TRUE)
runApp()
runApp()
source('C:/Users/Sebastian/Desktop/MSc Leiden 2nd Year/##LabAst Works/#OT2_Main/SingleplateMIC/sourceFunctions.R', echo=TRUE)
runApp()
errMessage
dis
runApp()
runApp()
