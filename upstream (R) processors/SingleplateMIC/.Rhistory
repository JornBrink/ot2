source("~/WebServer/ot2/SingleplateMIC/sourceFunctions.R", echo=TRUE)
source("~/WebServer/ot2/SingleplateMIC/sourceFunctions.R", echo=TRUE)
file_name
res <- read_xlsx(file_name, range="C1:M2") %>% data.frame() %>%
select_if(function(x) any(!is.na(x)))
source("~/WebServer/ot2/SingleplateMIC/sourceFunctions.R", echo=TRUE)
res <- read_xlsx(file_name, range="C1:M2") %>% data.frame() %>%
select_if(function(x) any(!is.na(x)))
source("~/WebServer/ot2/SingleplateMIC/sourceFunctions.R", echo=TRUE)
source("~/WebServer/ot2/SingleplateMIC/sourceFunctions.R", echo=TRUE)
source("~/WebServer/ot2/SingleplateMIC/sourceFunctions.R", echo=TRUE)
source("~/WebServer/ot2/SingleplateMIC/sourceFunctions.R", echo=TRUE)
source("~/WebServer/ot2/SingleplateMIC/sourceFunctions.R", echo=TRUE)
View(cmdList)
View(cmdList_output)
View(cmdList_output)[[4]]
cmdList_output
cmdList_output[[4]]
cmdList_output[[4]] %>% View()
omega_rtv           <-  diag(2)
dimnames(omega_rtv) <- list(NULL, c("eta_CL",
"eta_V1"))
omega_rtv
source("C:/Users/sebas/Downloads/AntibioticPKPD_Starting script (2).r", echo=TRUE)
View(halfpoint)
unique(halfpoint$sim.id)
library(reshape2)
dqs <- halfpoint %>% select(sim.id, time, CL) %>% dcast(sim.id~time, value.var = "CL")
View(dqs)
dqs <- halfpoint %>% select(sim.id, time, C1) %>% dcast(sim.id~time, value.var = "C1")
source("~/WebServer/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/WebServer/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/WebServer/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/WebServer/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/WebServer/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
#A. Parsing solutions map
solList <- GetSolutionInfo(drugMap)
#B. Pre-calculating solution amounts required (for wells)
solList <- CalculateRequired_ConcVol(drugMap, volInfo, solList, nPlate)
#C. Serial Dilution Pre-Calculation
solList <- solList %>% unite("medDrugID", Medium, DrugName, remove=F)
solList <- lapply(unique(solList$medDrugID), cal_dilScheme_MedID, solution_list=solList, stock_info=stockInfo) %>%
list.rbind() %>%
mutate(Conc=as.numeric(Conc), nWell=as.numeric(nWell), ReqVolume=as.numeric(ReqVolume),
ReqConc = as.numeric(ReqConc), finVolumes=as.numeric(finVolumes),
volAbove=as.numeric(volAbove)) %>%
dplyr::select(Medium, DrugName, Conc, solID, nWell, ReqVolume,
ReqConc, medDrugID, finVolumes, volAbove)
#D. Calculate required stock amounts
stockInfo <- CalculateStockAmt(solList, stockInfo)
# ---------- SECTION B - Deck Preparation -------------
#E. Initiate Deck Map
deckMap <- c("96-well_D", "96-well_E", "96-well_F",
"96-well_A", "96-well_B", "96-well_C",
"tip", "Rack_50_Solvent", "Rack_15",
"Rack_15_B", "Rack_1.5_Stock", "TRASH")
deckMap <- cbind.data.frame(sapply(c(1:12), function(x) paste("labware_", x, sep="")),
deckMap)
colnames(deckMap) <- c("Labware", "Item")
#F. Initiate Rack
rackMap <- InitiateRacks(deckMap)
#E. Distributing Stock and Solvent to Rack
rackMap <- DistributeStock(rackMap, stockInfo)
rackMap <- DistributeSolvent(solList, rackMap)
#F. Assigning Solution Slots
rackMap <- AssignSolutions(solList, rackMap)
View(solList)
View(stockInfo)
View(rackMap)
source("~/WebServer/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
dqs
#separate stock rack from rack map
stock_rack <- rack_map[grepl("Stock", rack_map$Item, ignore.case=T),]
stock_rack
rack_map <- rack_map[!(grepl("Stock", rack_map$Item, ignore.case=T)),]
rack_map
View(rack_map)
source("~/WebServer/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
rack_map
#separate stock rack from rack map
stock_rack <- rack_map[grepl("Stock", rack_map$Item, ignore.case=T),]
spare_15 <- rack_map[grepl("15", rack_map$Item),]
remaining_racks <- rack_map[(!(grepl("Stock", rack_map$Item, ignore.case=T)) & !grepl("15", rack_map$Item)),]
source("~/WebServer/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/WebServer/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
View(robotCommands)
source("~/WebServer/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
View(robotCommands)
source("~/WebServer/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
View(robotCommands)
75*8/200
source("~/WebServer/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
View(robotCommands)
