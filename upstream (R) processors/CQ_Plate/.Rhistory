nex_info <- c("FILL",
"NA",                 #drug name
parsed_names[[i]][1], #concentration
parsed_names[[i]][2], #solvent
"NA")                 #inoculum
}else{
#if all info is complete OR inoculum not added
nex_info <- c(paste(parsed_names[[i]][1], parsed_names[[i]][2], parsed_names[[i]][3], sep=' '),
parsed_names[[i]][1], #drug name
parsed_names[[i]][2], #concentration
parsed_names[[i]][3], #solvent
parsed_names[[i]][4]) #inoculum
}
#concatenate well
fin_map <- rbind(fin_map, nex_info)
rownames(fin_map) <- c()
}
}
#remove blanks from map
map <- map[(map[,2]!=""),]
map <- map[(map[,2]!="0"),]
#concatenate info
fin_map <- cbind.data.frame(map, fin_map)
colnames(fin_map) <- c('Well', 'fillID', 'solID', 'DrugType', 'DrugConc', 'Solvent', 'Inoc')
fin_map$Inoc[is.na(fin_map$Inoc)] <- "NA"
#expecting dot/comma decimal separator
if(is.character(fin_map$DrugConc[1])){
fin_map$DrugConc <- gsub(",", ".", fin_map$DrugConc) %>% as.numeric()
}
#dropping factor
fin_map[] <- lapply(fin_map, as.character)
return(fin_map)
}
#Preparations
CreateSolList <- function(plate_map, total_well_vol, inoc_vol, stock_list, n_plate){
plate_map$solID <- gsub(",", ".", plate_map$solID)
#get occurence
occ <- table(plate_map$solID)
occurences <- cbind.data.frame(names(occ), as.numeric(occ)* as.numeric(n_plate))
colnames(occurences) <- c("solID", "Occ")
#combine data frames
fin_list <- plate_map[,c(3:6)] %>% distinct() %>% left_join(occurences, by="solID") %>% filter(solID!="FILL")
colnames(fin_list) <- c('SolID', 'DrugType', 'DrugConc', 'Solvent', 'Occurence')
fin_list[] <- lapply(fin_list, as.character) #convert to character
#calculate required dilution vol
fin_list$Occurence <- as.numeric(fin_list$Occurence)
fin_list$DrugConc <- as.numeric(fin_list$DrugConc)
fin_list <- CalculateDilVolume(fin_list, total_well_vol, inoc_vol, stock_list)
#dropping factors
fin_list[] <- lapply(fin_list, as.character)
return(fin_list)
}
CalculateDilVolume <- function (sol_list, total_well_vol, inoc_vol, stock_list){
#calculate initially required amount NOTE: sol_list == fin_list
drugSol_well <- total_well_vol - inoc_vol
solAmt <- sol_list$Occurence * drugSol_well + 150 #adds 10 uL excess
sol_list <- cbind.data.frame(sol_list, solAmt)
#recalculate amount to adjust with the incoming inoculum aka drugconc before innoculum is added (if tot = 200 inoc = 100 then drugconc first has to be 2x)
sol_list$DrugConc <- as.numeric(sol_list$DrugConc) *
total_well_vol / (total_well_vol - inoc_vol)
#for sol list dont need no drug conc well
sol_list <- sol_list[(sol_list$DrugType != ""),]
#new list
new_solList <- c()
#iteration needed
solvents <- unique(sol_list$Solvent)
drugs <- unique(sol_list$DrugType)
for(i in c(1:length(solvents))){
for(j in c(1:length(drugs))){
curList <- subset(sol_list, DrugType==drugs[j] & Solvent==solvents[i])
#print(curList)
#start the check for pre dilution needed
dil <- curList$DrugConc
dil <- cbind(dil, stock_list, curList$solAmt)
dil <- cbind(dil, unlist((dil[,1]*dil[,3])/dil[,2]))%>% data.frame()
colnames(dil) <- c("c2", "c1", "v2", "v1")
check <- ifelse(dil$v1 >= 20, "Done", "Not_done")
dil <- cbind(dil, check)
dil$'10x' <- dil$c1
#if dil$'10x' is equal to dil$c1 no dilution required
counter <- 1
print(dil)
print("first")
while ("Not_done" %in% dil$check){
dil$'10x'[dil$check == "Not_done"] <- dil$c1[dil$check == "Not_done"] / (10^counter)
dil$v3 <- unlist(dil[,1]*dil[,3])/dil[,6]
dil$dil1check <- ifelse(dil$v3 >= 20, "Done", "Not_done")
print(dil)
#Check so that v3 can actually be made by the pipette THIS Does make it linear
dil$total[dil$check == "Not_done" & dil$dil1check == "Done"] <- dil$v3[dil$check == "Not_done" & dil$dil1check == "Done"] * 10
dil$check[dil$dil1check=='Done'] <- "Done"
print(dil)
print('end loop #')
# loop counter
counter <- counter + 1
}
#First check how mucht of the predilution (v3 of 10x) is needed before the well concentrations can be made
predilutions <- c()
predilutions <- aggregate(dil$v3, by = list(dil$'10x'), FUN = sum)
#100 ul slack
predilutions[,2] <- predilutions[,2]+100
colnames(predilutions) <- c("mg/l", "volume (ul)")
predilutions$volumes <- ifelse((predilutions$"volume (ul)"/10) < 20, predilutions$"volume (ul)"[(predilutions$"volume (ul)"/10) < 20] * 10, miep$"volume (ul)" )
print(predilutions)
#hint for myself cntr + shift + c mass comment
Done = FALSE
predilu <- cbind(dil, stock_list, curList$solAmt)
predilu <- cbind(dil, unlist((dil[,1]*dil[,3])/dil[,2]))%>% data.frame()
colnames(predilu) <- c("c2", "c1", "v2", "v1")
print(predilu)
while (Done == FALSE){
break
}
}
}
}
#main----
main <- function(file_path, file_name = ""){
#Read input plate ----
stockList <- tryCatch({
Getstocks(file_path)
},
error = function(cond){
if(errMessage == ""){
errMessage <<- "Input file error -Stocklist"
}
return(NA)
})
WellInfo <- tryCatch({
GetVol(file_path)
},
error = function(cond){
if(errMessage == ""){
errMessage <<- "Input file error - wellInfo"
}
return(NA)
})
Platemap <- tryCatch({
Getplatemap(file_path)
},
error = function(cond){
if(errMessage == ""){
errMessage <<- "Input file error - plateMap"
}
return(NA)
})
Platenum <- tryCatch({
Getplatenum(file_path)
},
error = function(cond){
if(errMessage == ""){
errMessage <<- "Input error - Plate number"
}
return(NA)
})
#Get solution list and dilution scheme----
solList <- tryCatch({
CreateSolList(Platemap, WellInfo["TotalVol"], WellInfo["FillVol"], stockList, Platenum)
},
error = function(cond){
if(errMessage == ""){
errMessage <<- "Failed to initiate solution list"
}
return(NA)
})
}
#TROUBLESHOOTING---------
errMessage <<- ""
fpath <- "C:\\Users\\jornb\\OneDrive\\Work\\Rscripts\\Serial dilutions"
dataName <- "MV_InputTemplate.xlsx"
Test <- paste(fpath, dataName, sep="//")
dqs <- main(paste(fpath, dataName, sep = "//"))
if(errMessage == ""){
errMessage <<- "Input file error -Stocklist"
}
options(stringsAsFactors = F)
library(dplyr)
library(rlist)
library(readxl)
#Functions
#input
Getstocks<-function(file_name){
stock<- read_xlsx(file_name, range="C1:M2")%>% data.frame() %>%
select_if(function(x) any(!is.na(x)))
sl_stock <- unlist(stock)
if(is.character(sl_stock[1])){
sl_stock <<- gsub(",", ".", sl_stock) %>% as.numeric()
}
names(sl_stock) <- colnames(stock)
return(sl_stock)
}
GetVol<- function(file_name){
vol <- read_xlsx(file_name, range="C5:C6", col_names = F) %>% unlist()
names(vol) <- c("TotalVol", "FillVol")
return(vol)
}
Getplatenum<-function(file_name){
platenum <- read_xlsx(file_name, range = "F6", col_names = F) %>% unlist()
return(platenum)
}
Getplatemap<-function(file_name){
platemp<-read_xlsx(file_name, range="B57:M64", col_names = F) %>% data.frame()
rownames(platemp)<- LETTERS[1:8]
colnames(platemp)<- sapply(c(1:12), toString)
#parsing into vector
map <- c()
for(row in c(1:8)){
#subset
curRow <- unlist(platemp[row,])
#get info
well_id <- sapply(c(1:12), function(x) paste(LETTERS[row], toString(x), sep=''))
curRow <- cbind(well_id, curRow)
#concatenate results
map <- rbind(map, curRow)
}
fin_map <- c()
parsed_names <- sapply(map[,2], function(x) strsplit(x, ' ', fixed=T))
for(i in c(1:length(parsed_names))){
#if well is empty
if(map[i,2]!="0" & map[i,2]!=""){
if(parsed_names[[i]][1]=="0"){
#if both drug name and inoculum is not filled, then it is a blank fill well (which might as well be blank control)
nex_info <- c("FILL",
"NA",                 #drug name
parsed_names[[i]][1], #concentration
parsed_names[[i]][2], #solvent
"NA")                 #inoculum
}else{
#if all info is complete OR inoculum not added
nex_info <- c(paste(parsed_names[[i]][1], parsed_names[[i]][2], parsed_names[[i]][3], sep=' '),
parsed_names[[i]][1], #drug name
parsed_names[[i]][2], #concentration
parsed_names[[i]][3], #solvent
parsed_names[[i]][4]) #inoculum
}
#concatenate well
fin_map <- rbind(fin_map, nex_info)
rownames(fin_map) <- c()
}
}
#remove blanks from map
map <- map[(map[,2]!=""),]
map <- map[(map[,2]!="0"),]
#concatenate info
fin_map <- cbind.data.frame(map, fin_map)
colnames(fin_map) <- c('Well', 'fillID', 'solID', 'DrugType', 'DrugConc', 'Solvent', 'Inoc')
fin_map$Inoc[is.na(fin_map$Inoc)] <- "NA"
#expecting dot/comma decimal separator
if(is.character(fin_map$DrugConc[1])){
fin_map$DrugConc <- gsub(",", ".", fin_map$DrugConc) %>% as.numeric()
}
#dropping factor
fin_map[] <- lapply(fin_map, as.character)
return(fin_map)
}
#Preparations
CreateSolList <- function(plate_map, total_well_vol, inoc_vol, stock_list, n_plate){
plate_map$solID <- gsub(",", ".", plate_map$solID)
#get occurence
occ <- table(plate_map$solID)
occurences <- cbind.data.frame(names(occ), as.numeric(occ)* as.numeric(n_plate))
colnames(occurences) <- c("solID", "Occ")
#combine data frames
fin_list <- plate_map[,c(3:6)] %>% distinct() %>% left_join(occurences, by="solID") %>% filter(solID!="FILL")
colnames(fin_list) <- c('SolID', 'DrugType', 'DrugConc', 'Solvent', 'Occurence')
fin_list[] <- lapply(fin_list, as.character) #convert to character
#calculate required dilution vol
fin_list$Occurence <- as.numeric(fin_list$Occurence)
fin_list$DrugConc <- as.numeric(fin_list$DrugConc)
fin_list <- CalculateDilVolume(fin_list, total_well_vol, inoc_vol, stock_list)
#dropping factors
fin_list[] <- lapply(fin_list, as.character)
return(fin_list)
}
CalculateDilVolume <- function (sol_list, total_well_vol, inoc_vol, stock_list){
#calculate initially required amount NOTE: sol_list == fin_list
drugSol_well <- total_well_vol - inoc_vol
solAmt <- sol_list$Occurence * drugSol_well + 150 #adds 10 uL excess
sol_list <- cbind.data.frame(sol_list, solAmt)
#recalculate amount to adjust with the incoming inoculum aka drugconc before innoculum is added (if tot = 200 inoc = 100 then drugconc first has to be 2x)
sol_list$DrugConc <- as.numeric(sol_list$DrugConc) *
total_well_vol / (total_well_vol - inoc_vol)
#for sol list dont need no drug conc well
sol_list <- sol_list[(sol_list$DrugType != ""),]
#new list
new_solList <- c()
#iteration needed
solvents <- unique(sol_list$Solvent)
drugs <- unique(sol_list$DrugType)
for(i in c(1:length(solvents))){
for(j in c(1:length(drugs))){
curList <- subset(sol_list, DrugType==drugs[j] & Solvent==solvents[i])
#print(curList)
#start the check for pre dilution needed
dil <- curList$DrugConc
dil <- cbind(dil, stock_list, curList$solAmt)
dil <- cbind(dil, unlist((dil[,1]*dil[,3])/dil[,2]))%>% data.frame()
colnames(dil) <- c("c2", "c1", "v2", "v1")
check <- ifelse(dil$v1 >= 20, "Done", "Not_done")
dil <- cbind(dil, check)
dil$'10x' <- dil$c1
#if dil$'10x' is equal to dil$c1 no dilution required
counter <- 1
print(dil)
print("first")
while ("Not_done" %in% dil$check){
dil$'10x'[dil$check == "Not_done"] <- dil$c1[dil$check == "Not_done"] / (10^counter)
dil$v3 <- unlist(dil[,1]*dil[,3])/dil[,6]
dil$dil1check <- ifelse(dil$v3 >= 20, "Done", "Not_done")
print(dil)
#Check so that v3 can actually be made by the pipette THIS Does make it linear
dil$total[dil$check == "Not_done" & dil$dil1check == "Done"] <- dil$v3[dil$check == "Not_done" & dil$dil1check == "Done"] * 10
dil$check[dil$dil1check=='Done'] <- "Done"
print(dil)
print('end loop #')
# loop counter
counter <- counter + 1
}
#First check how mucht of the predilution (v3 of 10x) is needed before the well concentrations can be made
predilutions <- c()
predilutions <- aggregate(dil$v3, by = list(dil$'10x'), FUN = sum)
#100 ul slack
predilutions[,2] <- predilutions[,2]+100
colnames(predilutions) <- c("mg/l", "volume (ul)")
predilutions$volumes <- ifelse((predilutions$"volume (ul)"/10) < 20, predilutions$"volume (ul)"[(predilutions$"volume (ul)"/10) < 20] * 10, miep$"volume (ul)" )
print(predilutions)
#hint for myself cntr + shift + c mass comment
Done = FALSE
predilu <- cbind(dil, stock_list, curList$solAmt)
predilu <- cbind(dil, unlist((dil[,1]*dil[,3])/dil[,2]))%>% data.frame()
colnames(predilu) <- c("c2", "c1", "v2", "v1")
print(predilu)
while (Done == FALSE){
break
}
}
}
}
#main----
main <- function(file_path, file_name = ""){
#Read input plate ----
stockList <- tryCatch({
Getstocks(file_path)
},
error = function(cond){
if(errMessage == ""){
errMessage <<- "Input file error -Stocklist"
}
return(NA)
})
WellInfo <- tryCatch({
GetVol(file_path)
},
error = function(cond){
if(errMessage == ""){
errMessage <<- "Input file error - wellInfo"
}
return(NA)
})
Platemap <- tryCatch({
Getplatemap(file_path)
},
error = function(cond){
if(errMessage == ""){
errMessage <<- "Input file error - plateMap"
}
return(NA)
})
Platenum <- tryCatch({
Getplatenum(file_path)
},
error = function(cond){
if(errMessage == ""){
errMessage <<- "Input error - Plate number"
}
return(NA)
})
#Get solution list and dilution scheme----
solList <- tryCatch({
CreateSolList(Platemap, WellInfo["TotalVol"], WellInfo["FillVol"], stockList, Platenum)
},
error = function(cond){
if(errMessage == ""){
errMessage <<- "Failed to initiate solution list"
}
return(NA)
})
}
#TROUBLESHOOTING---------
errMessage <<- ""
fpath <- "C:\\Users\\jornb\\OneDrive\\Work\\Rscripts\\Serial dilutions"
dataName <- "MV_InputTemplate.xlsx"
Test <- paste(fpath, dataName, sep="//")
dqs <- main(paste(fpath, dataName, sep = "//"))
shiny::runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
shiny::runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
shiny::runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
source("C:/Users/jornb/OneDrive/Work/Rscripts/Paralel dilution/Dilution source.R", echo=TRUE)
source("C:/Users/jornb/OneDrive/Work/Rscripts/Paralel dilution/Dilution source.R", echo=TRUE)
source("C:/Users/jornb/OneDrive/Work/Rscripts/Paralel dilution/Dilution source.R", echo=TRUE)
source("C:/Users/jornb/OneDrive/Work/Rscripts/Paralel dilution/Dilution source.R", echo=TRUE)
source("C:/Users/jornb/OneDrive/Work/Rscripts/Paralel dilution/Dilution source.R", echo=TRUE)
source("C:/Users/jornb/OneDrive/Work/Rscripts/Paralel dilution/Dilution source.R", echo=TRUE)
source("C:/Users/jornb/OneDrive/Work/Rscripts/Paralel dilution/Dilution source.R", echo=TRUE)
shiny::runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
observeEvent(input$confirmchange,{
file_name <- paste0(mainDir, "/", inventoryList)
neo <- tabel2
write.xlsx(neo, file_name, overwrite = TRUE)
})
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
shiny::runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
runApp()
runApp('GitHub/Inventory-system-vanhasselt/InventorySystem')
shiny::runApp('GitHub/ot2new/upstream (R) processors/CQ_Plate')
runApp('GitHub/ot2new/upstream (R) processors/CQ_Plate')
runApp('GitHub/ot2new/upstream (R) processors/CQ_Plate')
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
View(DistributeSolvent)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
#clump values per-drug type
amounts <- sapply(unique(drugnames), function(x) max(ceiling(sum(reqStockAmt[drugnames==x])/100)*100, 300))
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
source("~/GitHub/ot2new/upstream (R) processors/CQ_Plate/ComboDrugs_source.R", echo=TRUE)
View(robotHandler)
runApp('GitHub/ot2new/upstream (R) processors/CQ_Plate')
shiny::runApp('GitHub/ot2new/upstream (R) processors/CQ_Plate')
